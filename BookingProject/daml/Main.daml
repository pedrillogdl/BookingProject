module Main where

import Booking
import Notary  
import Daml.Script
--import Advertisement
import DA.Optional
import DA.Date
import DA.List
import Setup
import Payment



setup : Script ()
setup = script do

  Setup.setup
  --alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  --bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  --charlie <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  --cesar <- allocatePartyWithHint "Cesar" (PartyIdHint "Cesar")
  --publico <- allocatePartyWithHint "Publico" (PartyIdHint "Publico")
  notary <- allocatePartyWithHint "Notary" (PartyIdHint "Notary") 

  publicoId <- validateUserId $ toUserId "publico"
  publicoUser <- getUser publicoId
  let Some publico = publicoUser.primaryParty
  

  -- Now, we get access to "public" by quering bob rights
  publicoRights <- listUserRights publicoId
  let readAs = [p | CanReadAs p <- publicoRights]
  let publicoPublic = head readAs
  

  aliceId <- validateUserId $ toUserId "alice"
  aliceUser <- getUser aliceId
  let Some alice = aliceUser.primaryParty
  

  -- Now, we get access to "public" by quering bob rights
  aliceRights <- listUserRights aliceId
  let readAs = [p | CanReadAs p <- aliceRights]
  let alicePublic = head readAs
  

  cesarId <- validateUserId $ toUserId "cesar"
  cesarUser <- getUser cesarId
  let Some cesar = cesarUser.primaryParty
  

  -- Now, we get access to "public" by quering bob rights
  cesarRights <- listUserRights cesarId
  let readAs = [p | CanReadAs p <- cesarRights]
  let cesarPublic = head readAs
  

  charlieId <- validateUserId $ toUserId "charlie"
  charlieUser <- getUser charlieId
  let Some charlie = charlieUser.primaryParty
  

  -- Now, we get access to "public" by quering bob rights
  charlieRights <- listUserRights charlieId
  let readAs = [p | CanReadAs p <- charlieRights]
  let charliePublic = head readAs
  

  bobId <- validateUserId $ toUserId "bob"
  bobUser <- getUser bobId
  let Some bob = bobUser.primaryParty
  

  -- Now, we get access to "public" by quering bob rights
  bobRights <- listUserRights bobId
  let readAs = [p | CanReadAs p <- bobRights]
  let bobPublic = head readAs
  

  let 
    advertisement = Advertisement with
      title = "Front View Aparment in the best zone in the city "
      description = "Apartment with 2 bedrooms, each one with a queen size bed, living room, bath room, patio, etc"
      country = "Mexico"
      state = "Jalisco"
      city = "Zapopan"
      address = "Lopez Mateos 2320, La Calma"
      base_price = 1500.0
      hosts = charlie
      notarys = notary
      notes = "Check-in is dayly at 3 pm, check-out is daily at 11 am"
      totalguests = 5
      cancellation_policy = "Free cancellation one day before the check-in date, 30 cancellation fee after that day"
      cancellation_fee = 30.0
      housing_policy = "Any broken or missing thing will be charged to the customer, charges for cleaning are 1000 "
      housing_fees= 1000.0
      pictures = "Here I need to put the pictures"
      message_reason = None
  
  let
    booking2 = Booking with
      customer = publico
      host = publico
      check_in_day = date 3000 Jan 01
      check_out_day = date 300 Jan 02
      number_of_guests = 0
      base_price = 0.0
      offered_price = 0.0
      guests_total = 0
      note = "nothin"
      payments = [0.0]


    


    --second_advertisement =  advertisement with
      --title = "A beach Front View Aparment in the best zone in the city "


  bobHostReq <- submit bob do 
    createCmd HostsRequest 
      with 
        notary = notary 
        host = bob
        reason = "I want to be a host because I need to announce a room"

  rejectHostReq <- submit notary do 
    exerciseCmd bobHostReq RejectHostsRequest

  bobHostReq2 <- submit bob do 
    createCmd HostsRequest 
      with 
        notary = notary 
        host = bob
        reason = "Please, I want to be a host because I need to announce a room"

  acceptHostReq <- submit notary do 
    exerciseCmd bobHostReq2 HostRights

  revokeHost <- submit notary do 
    exerciseCmd acceptHostReq RevokeHostsRights

  charlieHostReq <- submit charlie do 
    createCmd HostsRequest 
      with 
        notary = notary 
        host = charlie
        reason = "I swear this is the last request, I want to be a host because I need to announce a room"

  acceptHostReq2 <- submit notary do 
    exerciseCmd charlieHostReq HostRights
  
  aliceCustomerReq <- submit alice do 
    createCmd CustomersRequest
      with 
        notary = notary 
        customer = alice
        reason = "I want to be a customer because I need to book a room "
  
  rejectCustomerReq <- submit notary do 
    exerciseCmd aliceCustomerReq RejectCustomerRequest

  aliceCustomerReq2 <- submit alice do 
    createCmd CustomersRequest
      with 
        notary = notary 
        customer = alice
        reason = "I really want to be a customer because I need to book a room "

  cesarCustomerReq <- submit cesar do 
    createCmd CustomersRequest
      with 
        notary = notary 
        customer = cesar
        reason = "I want to be a customer because I need to book a room "

  publicoCustomerReq <- submit publico do 
    createCmd CustomersRequest
      with 
        notary = notary 
        customer = publico
        reason = "We need a public profile"
  
  acceptCustomerReq <- submit notary do 
    exerciseCmd publicoCustomerReq GrantCustomerRights


  acceptCustomerReq <- submit notary do 
    exerciseCmd aliceCustomerReq2 GrantCustomerRights
  

  revokeCustomer <- submit notary do 
    exerciseCmd acceptCustomerReq RevokeCustomersRights
  
  aliceCustomerReq3 <- submit alice do 
    createCmd CustomersRequest
      with 
        notary = notary 
        customer = alice
        reason = "Please, No more requests, I really want to be a customer because I need to book a room "

  acceptCustomerReq2 <- submit notary do 
    exerciseCmd aliceCustomerReq3 GrantCustomerRights

  acceptCustomerReq3 <- submit notary do 
    exerciseCmd cesarCustomerReq GrantCustomerRights

  


  createFirstAdRequest <- submit advertisement.hosts do
    createCmd AdvertisementRequest
      with
        advertisement 

  rejectAdReq <- submit advertisement.notarys do
    exerciseCmd createFirstAdRequest RejectAdvertisementRequest
      with
        nmessage_reason = Some "This Ad doesn't have the right information"
   
  createSecondAdRequest <- submit advertisement.hosts do
    createCmd AdvertisementRequest
      with
        advertisement = advertisement with title = "A beach Front View Aparment in the best zone in the city"

  acceptAddReq <- submit advertisement.notarys do 
    exerciseCmd createSecondAdRequest ConfirmAdvertisementRequest
      with
        public = publicoPublic
  
  modifyAd <- submit advertisement.hosts do
    exerciseCmd acceptAddReq ModifyMyAd
      with
        public_user = publicoPublic, advertisement_modified = advertisement with housing_fees= 1500.0


  bookingAd <- submit alice do 
    createCmd BookingRequest
      with
        ad = modifyAd
        bookinga = booking2 with 
          customer = alice
          host = advertisement.hosts
          check_in_day = date 2023 Jun 22
          check_out_day = date 2023 Jun 30
          number_of_guests = 5
          base_price = advertisement.base_price
          offered_price = 1800.80
          guests_total = advertisement.totalguests
          note = "Alergic to Dogs"
          payments = [12.20]
        allocations = Allocation with customer = alice; price = 1800.80; check_in_day=date 2023 Jun 22; check_out_day=date 2023 Jun 30
        public = alice

  bookingAd2 <- submit cesar do 
    createCmd BookingRequest
      with
        ad = modifyAd
        bookinga = booking2 with 
          customer = cesar
          host = advertisement.hosts
          check_in_day = date 2023 Jun 26
          check_out_day = date 2023 Jul 2
          number_of_guests = 3
          base_price = advertisement.base_price
          offered_price = 1700.80
          guests_total = advertisement.totalguests
          note = "Alergic to Cats"
          payments = [12.20]
        allocations = Allocation with customer = cesar; price = 1700.80; check_in_day=date 2023 Jun 26; check_out_day=date 2023 Jul 2
        public = cesar
  
  bestDeal<- submit advertisement.hosts do
    exerciseCmd modifyAd CalculateBestRequest
      with
        requestIds = [bookingAd,bookingAd2]

  (place, payment) <- submit advertisement.hosts do
    exerciseCmd bestDeal ConfirmBookingRequest
      with
        message_reference = "Grand Total for booking Ad"
        days_before_cancellation = 2
        cancellationfee = 30.0


  billPaid <- submit alice do
    exerciseCmd  payment ClaimPaid
      with 
        transactionId = "1212sadsa"



  
  return ()

  -- Create a new template for extra charges like missing things or broken things
  -- Add charges for taxes and services